#!/usr/bin/env php
<?php
# Some functions to help the process...
function installComposer() {
	echo c("Attempting to download and install Composer... this may take a while...\n", "success");
	$sig = file_get_contents("https://composer.github.io/installer.sig");
	if ($sig === false) 
		exit(c("Error downloading Composer! Try installing Composer manually...\n", "danger"));
	$ret = copy('https://getcomposer.org/installer', 'composer-setup.php');
	if ($ret === false) 
		exit(c("Error downloading Composer! Try installing Composer manually...\n", "danger"));
	if (trim($sig) != hash_file('SHA384', 'composer-setup.php')) {
		unlink("composer-setup.php");
		exit(c("Error downloading Composer installer! Try installing Composer manually...\n", "danger"));
	}
	exec("php composer-setup.php --quiet", $result, $status);
	unlink("composer-setup.php");
	if ($status != 0 ) {
		foreach ($result as $line) echo $line. "\n";
		exit(c("Error installingdownloading Composer! Try installing Composer manually...\n", "danger"));
	}
	echo(c("Composer successfully installed!\n", "success"));
}
## From https://stackoverflow.com/questions/11807115 adapted with
# http://php.net/manual/en/faq.using.php#faq.using.shorthandbytes
function convertToBytes($from){
    $number=substr($from,0,-1);
    switch(strtoupper(substr($from,-1))){
        case "K":
            return $number*1024;
        case "M":
            return $number*pow(1024,2);
        case "G":
            return $number*pow(1024,3);
        case "T":
            return $number*pow(1024,4);
        default:
            return $from;
    }
}
function c($text, $status) {
	# Colorize the output
	switch ($status) {
		case "danger";
		return "\033[31m" . $text . "\033[0m";
		case "success";
		return "\033[32m" . $text . "\033[0m";
		case "warning";
		return "\033[33m" . $text . "\033[0m";
	}
}
function testDB() {
exec("mysql -u".getenv('DB_USERNAME').
	  " -h".getenv('DB_HOST').
	  " -p".getenv('DB_PASSWORD').
	  " ".getenv('DB_DATABASE') ."<<EOF
SELECT 1;
EOF", $result, $status);
	return ($status);
}
function checkVersion($name, $command, $min, $recommended, $unsupported = null) {
	exec($command, $result, $status);
	if ($status != 0) {
		echo c($name . " does not seem to be installed\n", "danger");
		return(1);
	} 
	preg_match ("/([\d\.-]+)/", $result[0], $version);
	if (sizeof($version)==0) {
		echo c("Error reading the version of " . $name . "\n", "warning");
		return(1);
	}
	if ( version_compare ($version[0], $min, "<"))	{ 
		echo c($name . " version is not compatible! Please upgrade!\n", "danger");
		return(1);
	} 
	if ( version_compare ($version[0], $recommended, "<")) {
		echo c($name . " version is below recommended...\n", "warning");
		return(1);
	}
	if ($unsupported and version_compare ($version[0], $unsupported, ">=")) {
		echo c($name . " version is currently unsupported! Downgrade if able...\n", "danger");
		return(1);
	}
}
function checkMysqlVersion($name, $command, $mysqlmin, $mysqlrecommended, $mariadbmin, $mariadbrecommended) { 
	// some tweaking, as MySQL may be MariaDB
	exec($command, $result, $status);
	if ($status != 0) {
		echo c($name . " does not seem to be installed\n", "danger");
		return(1);
	} 
	preg_match ("/([\d\.-]+).*?([\d\.-]+)/", $result[0], $version);
	preg_match ("/MariaDB/", $result[0], $ismariadb);
	if (sizeof($version)==0) {
		echo c("Error reading the version of " . $name . "\n", "warning");
		return(1);
	}
	if (sizeof($version)==0) { // we have MySQL
		if ( version_compare ($version[0], $mysqlmin, "<"))	{ 
			echo c($name . " version is not compatible! Please upgrade!\n", "danger");
			return(1);
		} 
		if ( version_compare ($version[0], $mysqlrecommended, "<")) {
			echo c($name . " version is below recommended...\n", "warning");
			return(1);
		}
	} else { // we have MariaDB; relevant version is the SECOND string
		if ( version_compare ($version[2], $mariadbmin, "<"))	{ 
			echo c($name . " version is not compatible! Please upgrade!\n", "danger");
			return(1);
		} 
		if ( version_compare ($version[2], $mariadbrecommended, "<")) {
			echo c($name . " version is below recommended...\n", "warning");
			return(1);
		}
	}
}
function checkContinue() {
	echo "Continue? yes/[no] ";
	$line = trim(fgets(STDIN));
	if ($line != "yes" and $line != "y")
		exit(c("Exiting...\n", "danger"));
}
function writeDotEnv($key, $value) { // edited from Laravel Framework @ KeyGenerateCommand.php
	file_put_contents(".env", preg_replace(
		"/^{$key}=.+/m",
		"{$key}=".$value,
        file_get_contents(".env"),
        -1,
        $counter
    ));
    if ($counter > 0) return; // all is well
    file_put_contents(".env", 
        file_get_contents(".env") . "\n" . 
        "### ADDED BY install SCRIPT " . date('Y-m-d') . "\n" . 
        $key . "=" . $value . "\n"
    );
}
function checkCurrentUser() {
	$uid = posix_geteuid();
	if ($uid < 1000) {
		echo c("The current user is: " . posix_getpwuid($uid)['name'] . "\n", "danger");
		echo c("This user seems to be a system or a privileged user!\n", "danger");
		echo c("The installation script should be executed as a non-privileged user!\n", "danger");
		checkContinue();
	}
	if ($uid != getmyuid()) {
		echo c("The current user is: " . posix_getpwuid($uid)['name'] . "\n", "danger");
		echo c("The owner of the installation script is: " . posix_getpwuid(getmyuid())['name'] . "\n", "danger");
		echo c("The installation script should be executed by the same user that own the files!\n", "danger");
		checkContinue();
	}
}
function checkMysqlLogBin() { // TODO: change name to checkMysqlConfig?
exec("mysql -u".getenv('DB_USERNAME').
	  " -h".getenv('DB_HOST').
	  " -p".getenv('DB_PASSWORD').
	  " ".getenv('DB_DATABASE') ."<<EOF
SHOW VARIABLES LIKE 'log_bin';
SHOW VARIABLES LIKE 'log_bin_trust_function_creators';
SHOW VARIABLES LIKE 'max_allowed_packet';
EOF", $result, $status);
	$logbin = false;
	$logbin_trust = false;
	$max_packet_ok = false;
	foreach($result as $line) {
		if (preg_match('/log_bin\s+(\w*)/', $line, $matches) and $matches[1] == "ON")
			$logbin = true;
	}
	foreach($result as $line) {
		if (preg_match('/log_bin_trust_function_creators\s+(\w*)/', $line, $matches) and $matches[1] == "ON")
			$logbin_trust = true;
	}
	foreach($result as $line) { // checks max_allows_
		if (preg_match('/max_allowed_packet\s+(\d*)/', $line, $matches) and $matches[1] > 100 * 1024 * 1024)
			$max_packet_ok = true;
	}
	if ($max_packet_ok === false) {
		echo c("Your MySQL settings have max_allowed_packet lower than the recommended 100M. This can break large data imports!\n", "warning");
	}
	if ($logbin === true and $logbin_trust === false) {
		echo c("Your current MySQL settings have binary logging activated, but not log_bin_trust_function_creators.\n", "danger");
		echo c("OpenDataBio needs the parameter log_bin_trust_function_creators set to 1 in your my.cnf file.\n", "danger");
		echo c("Remember to restart mysql afterwards", "danger");
		exit();
	}
}
function getApacheCmd() {
	# Determining cmdline for apache2ctl / httpd
	exec("which httpd", $result, $status);
	if ($status == 0) {
		# ArchLinux, CentOS, Fedora, Red Hat use:
		$apachecmd = "httpd";
	} else {
		# is there an user-accessible apachectl?
		exec("which apachectl", $result, $status);
		if ($status == 0) {
			$apachecmd = "apachectl";
		} else { # try a /usr/sbin installation
			$apachecmd = "/usr/sbin/apachectl";
		}
	}
	return $apachecmd;
}
function getComposerCmd() {
	# Do we have a system-wide composer, system-wise composer.phar or local composer.phar?
	exec("composer", $result, $status);
	if ($status == 0) {
		$composer = "composer";
		echo "Using system-wide composer...\n";
	} else {
		exec("composer.phar", $result, $status);
		if ($status == 0) {
			$composer = "composer.phar";
			echo "Using system-wide composer.phar...\n";
		} else {
			if (! file_exists("composer.phar")) {
				installComposer();
			}
			$composer = "php composer.phar";
			echo "Using local composer.phar...\n";
		}
	}
	return $composer;
}
function testProxy() {
	if (getenv('PROXY_URL') != '') {
		$proxystring = '';
		if(getenv('PROXY_USER') != '') {
			$proxystring = getenv('PROXY_USER') . ":" . getenv('PROXY_PASSWORD')."@";
		}
		$proxystring .= getenv('PROXY_URL') . ":" . getenv('PROXY_PORT');

		echo "Testing proxy settings...\n";
		$client = new \GuzzleHttp\Client(['base_uri' => 'http://www.example.com', 'proxy' => $proxystring]);
		try {
			$response = $client->request('GET', '');
			if ($response->getStatusCode() == 200) {
				echo c("Proxy configuration successfull!\n", "success");
			} else {
				echo c("Unable to connect to external providers using the provided proxy (Wrong status code)!\n", "danger");
			}
		} catch (GuzzleHttp\Exception\ConnectException $e) {
			echo c("Unable to connect to external providers using the provided proxy (ConnectException)!\n", "danger");
		} catch (GuzzleHttp\Exception\ClientException $e) {
			echo c("Unable to connect to external providers using the provided proxy (ClientException)!\n", "danger");
		}
	}
}
function checkSupervisor() {
	# Tests if there is a opendatabio-worker.ini file in common places
	if ((!file_exists("/etc/supervisor/conf.d/opendatabio-worker.conf")) and
		(!file_exists("/etc/supervisor.d/opendatabio-worker.ini")))
		echo c("Could not find supervisor worker file!\n", "warning");
	# Test is supervisor is running
	exec("ps ahxwwo command", $result);
	$running = false;
	foreach ($result as $line) 
		if (strpos($line, "supervisord"))
			$running = true;
	if (!$running)
		echo c("Supervisor daemon does not seem to be running!\n", "warning");
	echo "Do you wish to review the sample Supervisor worker file? [yes]/no ";
	$line = trim(fgets(STDIN));
	if ($line == "" or $line == "y" or $line == "yes") {
		echo "You should store the following lines in a file called
			/etc/supervisor/conf.d/opendatabio-worker.conf (Debian/Ubuntu) or 
			/etc/supervisor.d/opendatabio-worker.ini (ArchLinux)\n(You will need root access for that)\n\n";
		echo ";--------------\n";
		echo"[program:opendatabio-worker]\n";
		echo "process_name=%(program_name)s_%(process_num)02d\n";
		echo "command=php ". __DIR__ ."/artisan queue:work --sleep=3 --tries=1 --daemon\n";
		echo "autostart=true\n";
		echo "autorestart=true\n";
		echo "user=".posix_getpwuid(getmyuid())['name'] ."\n";
		echo "numprocs=8\n";
		echo "redirect_stderr=true\n";
		echo "stdout_logfile=". __DIR__ ."/storage/logs/supervisor.log\n";
		echo ";--------------\n\n";
	}
}

############ End of functions, starting script
echo c("Starting OpenDataBio installation! :)\n", "success");
checkCurrentUser();

echo "Checking versions...\n";
$trouble = 0;
$apachecmd = getApacheCmd();
$trouble = $trouble + checkVersion("Apache Web Server", $apachecmd . " -v", "2.2", "2.4");
$trouble = $trouble + checkVersion("PHP", "php -v", "7.0", "7.1");
$trouble = $trouble + checkMysqlVersion("MySQL database", "mysql --version", "5.7", "5.7.6", "10.1.2", "10.1.23");
$trouble = $trouble + checkVersion("Pandoc", "pandoc --version", "1.10", "1.10");
$trouble = $trouble + checkVersion("ImageMagick", "convert --version", "6.7.7", "6.8.9", "7.0");
$trouble = $trouble + checkVersion("Supervisor", "supervisord --version", "3.0.0", "3.3.0");
if($trouble == 0)
	echo c("All versions compatible!\n", "success");
echo "Checking configuration...\n";
### PHP extensions
if (! extension_loaded("openssl"))
	echo(c("OpenSSL PHP extension is required! Check your phpinfo()\n", "danger"));
if (! extension_loaded("pdo"))
	echo(c("PDO PHP extension is required! Check your phpinfo()\n", "danger"));
if (! extension_loaded("pdo_mysql"))
	echo(c("PDO MySQL PHP extension is required! Check your phpinfo() and try running 'apt-get install php5-mysql'\n", "danger"));
if (! extension_loaded("mbstring"))
	echo(c("MBstring PHP extension is required! Check your phpinfo()\n", "danger"));
if (! extension_loaded("tokenizer"))
	echo(c("Tokenizer PHP extension is required! Check your phpinfo()\n", "danger"));
if (! extension_loaded("xml"))
	echo(c("XML PHP extension is required! Check your phpinfo()\n", "danger"));
if (! extension_loaded("dom"))
	echo(c("DOM PHP extension is required! Check your phpinfo()\n", "danger"));
#if (! extension_loaded("apcu"))
#	echo c("Apcu PHP extension is recommended for better performance...\n", "warning");
#if (! extension_loaded("opcache"))
#	echo c("Opcache PHP extension is recommended for better performance...\n", "warning");
if (! ini_get("allow_url_fopen"))
	echo(c("The PHP initialization directive allow_url_fopen must be set to true!\n", "danger"));
if (! ini_get("memory_limit") or convertToBytes(ini_get('memory_limit')) < 256 * 1024 * 1024)
	echo(c("The PHP initialization directive memory_limit should be at least 256M!\n", "danger"));
if (! ini_get("post_max_size") or convertToBytes(ini_get('post_max_size')) < 20 * 1024 * 1024)
	echo(c("The PHP initialization directive post_max_size should be at least 20M!\n", "danger"));
if (! ini_get("upload_max_filesize") or convertToBytes(ini_get('upload_max_filesize')) < 20 * 1024 * 1024)
	echo(c("The PHP initialization directive upload_max_filesize should be at least 20M!\n", "danger"));

### Apache config
exec($apachecmd . " -M", $result, $status);
$rewrite = false; $userdir = false;
foreach ($result as $str) {
  if (preg_match ('/rewrite/i', $str, $m))
	  $rewrite = true;
  if (preg_match ('/alias/i', $str, $m))
	  $alias = true;
}
if (! $alias)
	echo c("The 'mod_alias' Apache module is recommended, but it's not loaded...\n", "warning");
if (! $rewrite)
	echo c("The 'mod_rewrite' Apache module is recommended, but it's not loaded...\n", "warning");

checkContinue();
# Determine which composer to use and run 'composer install'
$composer = getComposerCmd();
exec($composer . " install", $result, $status);
if ($status == 0) {
	echo c("PHP dependencies installed dependencies successfully!\n", "success");
} else {
	foreach ($result as $line) echo $line. "\n";
	exit (c("Running 'composer install' failed!\n", "danger"));
}

echo c("Clearing caches...\n", "success");
system("php artisan config:clear");
system("php artisan route:clear");
system("php artisan view:clear");
system("php artisan cache:clear");
system("$composer dump-autoload");

# Process DotEnv file
if(file_exists(".env")) {
	echo c("Using .env environment file\n", "success");
} else {
	echo c("Creating new .env environment file\n", "success");
	$ret = copy('.env.example', '.env');
	if ($ret === false) 
		exit(c("Error creating .env file! Check that you have write permission on current directory!\n", "danger"));
	system("php artisan key:generate");
}

require "./vendor/autoload.php";
$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();

echo "Do you wish to review the configuration for your app? [yes]/no ";
$line = trim(fgets(STDIN));
if ($line == "" or $line == "y" or $line == "yes") {

	echo c("Setting the environment variables... for more options, edit the .env file later!\n", "success");
	$prod = getenv('APP_ENV');
	if ($prod == "production") {
		echo "Is this installation for development or production? [production]/development ";
	} else {
		echo "Is this installation for development or production? production/[development] ";
	}
	$line = trim(fgets(STDIN));
	if (substr($line,0,1) == "p") $prod = "production";
	if (substr($line,0,1) == "d") $prod = "development";
	if ($prod == "production") {
		echo "Using production settings!\n";
		writeDotEnv('APP_ENV', 'production');
		writeDotEnv('APP_DEBUG', 'false');
		writeDotEnv('QUEUE_DRIVER', 'database');
	} else {
		echo "Using development settings!\n";
		writeDotEnv('APP_ENV', 'local');
		writeDotEnv('APP_DEBUG', 'true');
		writeDotEnv('QUEUE_DRIVER', 'sync');
	}
	echo "What should the base URL for your app be? [".getenv('APP_URL')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('APP_URL', $line);
	echo "Database username? [".getenv('DB_USERNAME')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('DB_USERNAME', $line);
	echo "Database password? [".getenv('DB_PASSWORD')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('DB_PASSWORD', $line);
	echo "Database name? [".getenv('DB_DATABASE')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('DB_DATABASE', $line);
	echo "Proxy host (leave blank for no proxy)? [".getenv('PROXY_URL')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_URL', $line);
	echo "Proxy port? [".getenv('PROXY_PORT')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_PORT', $line);
	echo "Proxy username (leave blank if not required)? [".getenv('PROXY_USER')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_USER', $line);
	echo "Proxy password? [".getenv('PROXY_PASSWD')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('PROXY_PASSWD', $line);
	echo "Google Maps API key? [".getenv('GMAPS_API_KEY')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('GMAPS_API_KEY', $line);
	echo "Mobot (tropicos.org) API key? [".getenv('MOBOT_API_KEY')."] ";
	$line = trim(fgets(STDIN));
	if ($line != "")
		writeDotEnv('MOBOT_API_KEY', $line);
	# Reloads the environment file
	$dotenv->overload();
}
# Tests the proxy configuration

testProxy();

# Database user and connection
echo "Testing database connection...\n";
require "./vendor/autoload.php";
$dotenv = new Dotenv\Dotenv(__DIR__);
$dotenv->load();
if (testDB() != 0) {
	echo c("Database connection failed!\n", "warning");
	echo c("Do you want to create the database user and schema? [yes]/no ", "warning");
	$line = trim(fgets(STDIN));
	if ($line != "" and $line != "y" and $line != "yes") {
		exit(c("Unable to complete installation. Please create the database and database user.\n", "danger"));
	} else {
		echo c("You will be prompted now for the MySQL root password:\n", "warning");
		exec('mysql -uroot -p <<EOF
CREATE DATABASE \`' . getenv('DB_DATABASE') . '\`;
CREATE USER \`' . getenv('DB_USERNAME') . '\`@\`localhost\` IDENTIFIED BY \''. getenv('DB_PASSWORD'). '\';
GRANT ALL ON \`' . getenv('DB_DATABASE') . '\`.* TO \`' . getenv('DB_USERNAME') . '\`@\`localhost\`;
EOF', $result, $status);
		if ($status != 0 or testDB() != 0) 
			exit(c("Unable to create database! Try to create the user and database manually...\n", "danger"));
	}
}
echo c("Database connection successfull!\n", "success");

checkMysqlLogBin();

echo "Running database migrations... This may take a while...\n";
system("php artisan migrate", $status);
if ($status != 0) {
	exit (c("running 'php artisan migrate' failed!\n", "danger"));
}

echo "Do you wish to seed the database with randomly generated test data? yes/[no] ";
$line = trim(fgets(STDIN));
if ($line == "y" or $line == "yes") {
	system("php artisan db:seed", $status);
	if ($status != 0) {
		exit (c("running 'php artisan db:seed' failed!\n", "danger"));
	}
}


if (getenv('APP_ENV') == 'production') {
	echo c("Running code optimizations for production environment...\n", "success");
	system("php artisan config:cache");
	system("php artisan route:cache");
	system("php artisan optimize");
	# Check Supervisor config file
	checkSupervisor();
}

echo "Changing storage area permissions...\n";
exec("chmod -fR 777 storage");
exec("chmod -fR 777 bootstrap/cache");

echo c("********************************************\n", "success");
echo c("OpenDataBio has been successfully installed!\n", "success");
# TODO: check supervisor availability for prod
